#include <iostream>
#include <vector>
#include <algorithm>
/*최대한 빠른 연산을 구하려면 
dp를 사용해서 빠르게 구할 수 있음
먼저 반복문을 돌면서 dp를 완성하며 최솟값을 계속 업데이트 하는것.
ex) 5를 입력하면 dp[5]를 구한다
dp[2]=dp[1]+1 이 담김 현재 dp[1]=0 따라서 dp[2]=1
i가 2로 나눠짐 그럼 첫번째 분기로 입장
dp[2]=min(dp[2],dp[1]+1)=1 i++
dp[3]=dp[2]+1, 3으로 나눠짐dp[3]=min(dp[2],dp[3/3]+1)=1 i++
dp[4]=dp[3]+1(요 과정이 의미하는게 저상태에서 1을 뺏을때 시행횟수를 말하는 거임),
그걸 dp[i]에다가 넣어놓고 다른 과정을 했을때의 시행횟수랑 비교하는거지 
그래서 더 작은 쪽을 선택하는 방법으로 최솟값을 찾는 거지
*/
using namespace std;
//10이 있다 치면 -1 /3 /3 =3, /2 -1 /2 /2=4, /2 -1 -1 /3
int main() {
    int n;
    cin >> n;
    
    vector<int> dp(n + 1, 0); //사이즈는 n+1, 모든 값은 0 dp
    
    for (int i = 2; i <= n; i++) {//이 for문을 돌면서 모든 숫자에 대한 연산을 미리 수행후 dp에 담아놓고 나중엔 꺼내 씀
        dp[i] = dp[i - 1] + 1; // 기본적으로 -1 연산을 수행하는 경우
        
        if (i % 2 == 0) 
            dp[i] = min(dp[i], dp[i / 2] + 1); // 2로 나누는 경우
            
        if (i % 3 == 0) 
            dp[i] = min(dp[i], dp[i / 3] + 1); // 3으로 나누는 경우
    }
    
    cout << dp[n] << endl; // 최소 연산 횟수 출력
    return 0;
}
